{
  "files": [
    {
      "path": "index.js",
      "functions": [
        {
          "name": "main",
          "params": "",
          "async": "true",
          "status": "1",
          "functionString": "async function main() {\n    let quit = false;\n    \n    while (!quit) {\n        console.clear();\n        const input = await prompt('c: Create quiz     s: Select quiz     q: quit:     ');\n\n        switch (input) {\n            case 'c': {\n                const quiz = await createQuiz();\n                await manageQuiz(quiz);\n                quizzes.push(quiz);\n                break;\n            }\n\n            case 's': {\n                const quiz = await selectQuiz(quizzes);\n                await manageQuiz(quiz);\n                break;\n            }\n\n            case 'q':\n                quit = true;\n                break;\n\n            default:\n                break\n        }\n    }\n}",
          "testCases": []
        }
      ]
    },
    {
      "path": "lib/Quiz.js",
      "functions": [
        {
          "name": "createQuiz",
          "params": "",
          "async": "true",
          "status": "1",
          "functionString": "async function createQuiz() {\n    console.clear();\n    let quiz = new Quiz();\n    const quizName = await prompt('Enter name of the quiz: ');\n    quiz.name = quizName;\n\n    return quiz;\n}",
          "testCases": []
        },
        {
          "name": "manageQuiz",
          "params": "quiz",
          "async": "true",
          "status": "1",
          "functionString": "async function manageQuiz(quiz) {\n    let finished = false;\n\n    while (!finished) {\n        printQuiz(quiz);\n        const input = await prompt('a: add question     p: play quiz     b: back:     ');\n\n        switch (input) {\n            case 'a': {\n                const question = await createQuestion();\n                quiz.questions.push(question);\n                break;\n            }\n            case 'p': {\n                await playQuiz(quiz);\n                break;\n            }\n            case 'b': {\n                finished = true;\n                break;\n            }\n        }\n    }\n}",
          "testCases": []
        },
        {
          "name": "selectQuiz",
          "params": "quizzes",
          "async": "true",
          "status": "1",
          "functionString": "async function selectQuiz(quizzes) {\n    printQuizList(quizzes);\n    let input = await prompt('Select quiz by number: ');\n\n    return quizzes[parseInt(input) - 1];\n}",
          "testCases": []
        },
        {
          "name": "createQuestion",
          "params": "",
          "async": "true",
          "status": "1",
          "functionString": "async function createQuestion() {\n    console.clear();\n    let answers = [];\n\n    const question = await prompt('Enter question: ');\n\n    while (answers.length < MAX_ANSWERS) {\n\n        const answer = await prompt(`\\nEnter answer ${answers.length + 1}: `);\n        answers.push(answer);\n    }\n\n    const correctAnswer = await prompt(`\\nEnter id of correct answer (1 - ${MAX_ANSWERS}): `);\n\n    return new Question(question, answers, correctAnswer);\n}",
          "testCases": []
        },
        {
          "name": "playQuiz",
          "params": "quiz",
          "async": "true",
          "status": "1",
          "functionString": "async function playQuiz(quiz) {\n    let numCorrectAnswers = 0;\n\n    for (let [i, question] of quiz.questions.entries()) {\n        console.clear();\n        console.log(`Question ${i + 1}:   ` + question.question + '\\n');\n\n        for (let [i, answer] of question.answers.entries()) {\n            console.log(`[${i + 1}]     ${answer}`);\n        }\n\n        const userAnswer = await prompt('\\nEnter id of answer: ');\n\n        if (userAnswer == question.correctAnswer) {\n            numCorrectAnswers++;\n        }\n    }\n\n    console.clear()\n    console.log(`Score: (${numCorrectAnswers} / ${quiz.questions.length})`);\n\n    await prompt('\\nPress Enter to go back...     '); // Another prompt here\n}",
          "testCases": []
        },
        {
          "name": "printQuiz",
          "params": "quiz",
          "async": "false",
          "status": "1",
          "functionString": "function printQuiz(quiz) {\n    console.clear()\n    console.log(`[ QUIZ: ${quiz.name} ]\\n`)\n\n    for (let question of quiz.questions) {\n        console.log(question.question);\n\n        for (let [i, answer] of question.answers.entries()) {\n            if (i + 1 == question.correctAnswer) {\n                console.log('x   ' + answer);\n            } else {\n                console.log('    ' + answer);\n            }\n        }\n        console.log('');\n    }\n}",
          "testCases": []
        },
        {
          "name": "printQuizList",
          "params": "quizzes",
          "async": "false",
          "status": "1",
          "functionString": "function printQuizList(quizzes) {\n    console.clear();\n    for (let [i, quiz] of quizzes.entries()) {\n        console.log(`[${i + 1}]   ${quiz.name}`);\n    }\n}",
          "testCases": []
        }
      ]
    },
    {
      "path": "lib/heplers.js",
      "functions": [
        {
          "name": "prompt",
          "params": "msg",
          "async": "true",
          "status": "1",
          "functionString": "async function prompt(msg) {\n\n    return new Promise((resolve, reject) => {\n        const rl = readline.createInterface( process.stdin, process.stdout );\n        rl.question(msg, input => {\n            resolve(input)\n            rl.close();\n        })\n    })\n}",
          "testCases": []
        }
      ]
    }
  ]
}